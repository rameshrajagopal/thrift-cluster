#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys,time, random
sys.path.append("../gen-py/bench")
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ArithmeticService
from ttypes import *

from threading import Thread

'''
HOST = "127.0.0.1"
PORT = 54343
REPEAT = 1000
CONCURRENCY = 10
'''

from datetime import datetime
import sys

class BenchWorker(Thread):
  def run(self):
    for i in range(0, self.repeat):
      c,t = self.create()
      sys.stdout.write("request: %s:%s:%s\n" % (self.threadNum, i, str(datetime.now()))) 
      c.multiply(random.randint(0, 10000), random.randint(0, 10000));
      sys.stdout.write("response: %s:%s:%s\n" % (self.threadNum, i, str(datetime.now()))) 
      self.close(t)

  def __init__(self, host, port, repeat, threadNum):
    self.host = host
    self.port = port
    self.repeat = repeat
    self.threadNum = threadNum
    Thread.__init__(self)

  def create(self):
    socket = TSocket.TSocket(self.host, self.port)
    transport = TTransport.TFramedTransport(socket)
    protocol = TBinaryProtocol.TBinaryProtocol(transport)
    client = ArithmeticService.Client(protocol)
    transport.open()
    return (client,transport)

  def close(self,transport):
    transport.close()

def startBenchMarking(host, port, repeat, concurrent):
    print "Starting client with host: %s port: %d repeat: %d concurrent: %d" % (host, port, repeat, concurrent)
    threads = [ BenchWorker(host, port, repeat, i) for i in range(0, concurrent)]
    t = time.time()
    for i in threads:
      i.start()

    for i in threads:
      i.join()
    print "Concurrency=", concurrent, ", Repeat=", repeat
    print time.time() - t , "s"

def Usage(progname):
    return '''
        %s <host ip> <port> <repeat> <concurrency>
        ''' % (progname)

if __name__ == '__main__':
    numArgs = len(sys.argv)
    if numArgs != 5:
        print Usage(sys.argv[0])
        sys.exit(-1)
    host = sys.argv[1]
    port = sys.argv[2]
    repeat = sys.argv[3]
    concurrency = sys.argv[4]
    startBenchMarking(host, int(port), int(repeat), int(concurrency))

