// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ArithmeticService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/server/TNonblockingServer.h>

#include <atomic>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

#define MAX_NUM_THREADS (10)
class ProxySlave;
extern std::shared_ptr<ProxySlave> getProxySlave(const std::string & addr, const int port, int id);
extern void processRequest(int reqNum, const std::string & req, std::vector<std::shared_ptr<ProxySlave>> & slaves);

using boost::shared_ptr;

using namespace  ::tutorial::arithmetic::gen;

class ArithmeticServiceHandler : virtual public ArithmeticServiceIf {
 public:
  ArithmeticServiceHandler(std::vector<std::shared_ptr<ProxySlave>> & s):
       slaves(s)
    {}

  int64_t add(const int32_t num1, const int32_t num2) {
      processRequest(reqNum++, "Add", slaves);  
      return num1 + num2;
  }

  int64_t multiply(const int32_t num1, const int32_t num2) {
      processRequest(reqNum++, "Multiply", slaves);  
      return num1 * num2;
  }
 private:
  std::atomic<int> reqNum {0};
  std::vector<std::shared_ptr<ProxySlave>> & slaves;
};

void masterTask(std::vector<std::shared_ptr<ProxySlave>> & slaves)
{
  int port = 9090;

  shared_ptr<ArithmeticServiceHandler> handler(new ArithmeticServiceHandler(slaves));
  shared_ptr<TProcessor> processor(new ArithmeticServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TFramedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  shared_ptr<ThreadManager> threadManager =  ThreadManager::newSimpleThreadManager(MAX_NUM_THREADS);
  shared_ptr<ThreadFactory> threadFactory(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start();

  //TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  TNonblockingServer server(processor, protocolFactory, port, threadManager);
  server.setNumIOThreads(2);
  server.serve();
}

#define MAX_NUM_SLAVES  (1)
int main(int argc, char **argv) 
{
   std::vector<std::shared_ptr<ProxySlave>> slaves;
   for (int num = 0; num < MAX_NUM_SLAVES; ++num) {
       slaves.push_back(getProxySlave("192.168.0.241", 9000, num));
   }
   masterTask(slaves);
   getchar();
   return 0;
}

